/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGVIEWER_OpenXRDisplay
#define OSGVIEWER_OpenXRDisplay 1

#include <osg/Referenced>
#include <osg/ref_ptr>
#include <osgViewer/View>

#include <cinttypes>
#include <string>

namespace osgViewer {

class XRState;

/** a camera for each OpenXR view.*/
class OSGVIEWER_EXPORT OpenXRDisplay : public ViewConfig
{
    public:

        enum FormFactor
        {
            HEAD_MOUNTED_DISPLAY,
            HANDHELD_DISPLAY,
        };

        enum BlendMode
        {
            // Matches XrEnvironmentBlendMode
            OPAQUE = 1,
            ADDITIVE = 2,
            ALPHA_BLEND = 3,
        };

        OpenXRDisplay();
        OpenXRDisplay(const std::string &appName,
                      uint32_t appVersion,
                      enum FormFactor formFactor);

        OpenXRDisplay(const OpenXRDisplay& rhs,
                      const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
        virtual ~OpenXRDisplay();

        META_Object(osgViewer, OpenXRDisplay);

        virtual void configure(osgViewer::View& view) const;

        void setApp(const std::string &appName, uint32_t appVersion)
        {
            _appName = appName;
            _appVersion = appVersion;
        }

        void setAppName(const std::string &appName)
        {
            _appName = appName;
        }
        const std::string &getAppName() const
        {
            return _appName;
        }

        void setAppVersion(uint32_t appVersion)
        {
            _appVersion = appVersion;
        }
        uint32_t getAppVersion() const
        {
            return _appVersion;
        }

        void setValidationLayer(bool validationLayer)
        {
            _validationLayer = validationLayer;
        }
        bool getValidationLayer() const
        {
            return _validationLayer;
        }

        void setFormFactor(enum FormFactor formFactor)
        {
            _formFactor = formFactor;
        }
        enum FormFactor getFormFactor() const
        {
            return _formFactor;
        }

        void preferEnvBlendMode(enum BlendMode mode)
        {
            uint32_t mask = (1u << (unsigned int)mode);
            _preferredEnvBlendModeMask |= mask;
            _allowedEnvBlendModeMask |= mask;
        }
        void allowEnvBlendMode(enum BlendMode mode)
        {
            uint32_t mask = (1u << (unsigned int)mode);
            _allowedEnvBlendModeMask |= mask;
        }

        void setUnitsPerMeter(float unitsPerMeter)
        {
            _unitsPerMeter = unitsPerMeter;
        }
        float getUnitsPerMeter(void) const
        {
            return _unitsPerMeter;
        }

    protected:

        friend class XRState;

        // For XrInstance creation
        std::string _appName;
        uint32_t _appVersion;
        bool _validationLayer;

        // To get XrSystem
        enum FormFactor _formFactor;

        // For choosing environment blend mode
        uint32_t _preferredEnvBlendModeMask;
        uint32_t _allowedEnvBlendModeMask;

        // How big the world
        float _unitsPerMeter;

        // Internal OpenXR state object
        // FIXME this should probably belong elsewhere
        mutable osg::ref_ptr<XRState> _state;
};

}

#endif

// SPDX-License-Identifier: LGPL-2.1-only
// Copyright (C) 2021 James Hogan <james@albanarts.com>

#ifndef OSGXR_Manager
#define OSGXR_Manager 1

#include <osg/Camera>
#include <osg/ref_ptr>

#include <osgViewer/View>

#include <osgXR/Settings>
#include <osgXR/View>

#include <list>

namespace osgXR {

class Mirror;

// Internal state class
class XRState;

/**
 * Public VR state manager class.
 * Applications can extend this class to allow tighter integration with osgXR.
 */
class Manager : public osgViewer::ViewConfig
{
    public:

        Manager();
        virtual ~Manager();

        virtual void configure(osgViewer::View& view) const;

        /*
         * OpenXR information.
         */

        /// Find the name of the OpenXR system in use.
        const char *getSystemName() const;

        /*
         * For implementation by derived classes.
         */

        /**
         * Callback telling the app to configure a new view.
         * This callback allows osgXR to tell the app to configure a new view of
         * the world. The application should notify osgXR of the addition and
         * removal of slave cameras which osgXR should hook into using the
         * osgXR::View parameter.
         * @param xrView The new osgXR::View with a public API to allow the
         *               application to retrieve what it needs in relation to
         *               the view and to inform osgXR of changes.
         */
        virtual void doCreateView(View *xrView) = 0;

        /**
         * Callback telling the app to destroy an existing view.
         * This callback allows osgXR to tell the app to remove an existing view
         * of the world that it had requested via doCreateView(). The
         * application should notify osgXR of the removal of any slave cameras
         * which it has already informed osgXR about.
         */
        virtual void doDestroyView(View *xrView) = 0;

        /// Add a custom mirror to the queue of mirrors to configure.
        void addMirror(Mirror *mirror);

        /// Set up a camera to render a VR mirror.
        void setupMirrorCamera(osg::Camera *camera);

        /*
         * Internal
         */

        inline Settings *_getSettings()
        {
            return _settings.get();
        }

        inline XRState *_getXrState()
        {
            return _state;
        }

        void _setupMirrors();

    protected:

        osg::ref_ptr<Settings> _settings;

    private:

        std::list<osg::ref_ptr<Mirror> > _mirrorQueue;
        mutable osg::ref_ptr<XRState> _state;
};

}

#endif
